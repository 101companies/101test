#!/usr/bin/perl
use strict;
use warnings;
use Cwd            qw(abs_path);
use File::Basename qw(dirname);
use File::Path     qw(make_path remove_tree);
use File::Slurp    qw(slurp);
use Getopt::Long;
use List::Util     qw(reduce);
use JSON::Schema;
use Test::More;
use YAML           qw(LoadFile);

BEGIN { push @INC, dirname $0 }
use Test101::Case;


use constant OPTIONS => qw(config schema cd results);

my %options;
GetOptions(\%options, map { "$_=s" } OPTIONS);

for (OPTIONS)
{
    die "Missing required option: $_" if not defined $options{$_};
    make_path($options{$_})           if not -e      $options{$_};
    $options{$_} = abs_path $options{$_} or die "Invalid path: $_ ($!)";
}

$ENV{results101dir} = $options{results};


my $test   = LoadFile($options{config});
my $schema = LoadFile($options{schema});

my $result = JSON::Schema->new($schema)->validate($test);
if (!$result)
{   die join "\n - ", "Error validating $options{config}:", $result->errors }


my %base = map { /^\d+$/ ? () : ($_ => $test->{$_}) } keys %$test;


chdir "$options{cd}" or die "Couldn't cd into $options{cd}: $!";


my @cases = map
{
    Test101::Case->new(
        branch => "$base{name}$_",
        number => $_,
        %options,
        %base,
        exists $test->{$_} ? %{$test->{$_}} : (),
    )
} 1 .. $test->{tests};

plan tests => reduce { $a + $b->tests } 0, @cases;
$_->test for @cases;
